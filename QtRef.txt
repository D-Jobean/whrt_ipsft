目录
The Meta-Object System详情描述
=Qt Assistant - Qt 5.9 - Qt Core - The Meta-Object System

The Property System 详情描述
=Qt Assistant - Qt 5.9 - Qt Core - The Property System

Object Model  详情描述
=Qt Assistant - Qt 5.9 - Qt Core - Object Model 

Object Trees & Ownership 详情描述
=Qt Assistant - Qt 5.9 - Qt Core - Object Trees & Ownership 

QObject Class详情描述
=Qt Assistant - Qt 5.9 - Qt Core - C++ Classes - QObject - Detailed Description

Signals & Slots详情描述
=Qt Assistant - Qt 5.9 - Qt Core - Signals & Slots

QEvent
QWidget
QThread
=========================================================================
/*by Jobean 20220310
    Qt是一套基于元对象的组件化UI开发框架，在Qt框架下可以把每个QObject视为一个可见或不可见的组件去开发，Qt框架为所有继承QObject的且带有Q_OBJECT宏定义的类对象(Qt对象)，
在框架内都生成一个与该实例对象对应的元对象，元对象持有Qt框架内实例对象的一切相关信息，并且拥有对这些信息运行时的读写权限，元对象代替实例对象在框架底层去实现所有框架提
供的特性功能，且实例对象与元对象在底层时时绑定，同步变化。则Qt框架内Qt对象的元对象机制很容易让Qt对象在运行时拥有类似信号槽通信、动态修改成员等非常优秀便捷的功能。所有
Qt对象或则Qt组件通过Qt框架提供的信号和槽机制在底层自动进行交互通信，就好像一个大屋子的人通过手机wifi相互通信一样，而不是传统的框架提供回调函数来实现通信。这种信号和槽
的通信方式使得Qt对象或组件看起来更具独立性，组件更专注于自身的事务，只需要设置好需要收到信号的槽和要对外发射的信号即可，组件根据需要相互进行信号和槽的连接，Qt框架中的
信号和槽映射好后，通信便由框架底层的元对象机制在运行时来自动完成。
    信号和槽机制是框架内Qt对象底层相互通信的机制，在框架角度来说是对内的。事件通信机制是是Qt框架用于接受用户触发UI界面信号的机制，是对外的。例如用户点击了某个按钮，Qt组
件首先是通过事件机制收到一个外部中断进行判断处理和传递，如果当前Qt组件(按钮组件)需要通知另一个Qt对象则需要依靠信号和槽机制来相互传递数据。
    所以在使用Qt框架的时候应关注几件事，如何尽可能将自己定义的各种各样的东西注册到Qt元对象机制当中去，走上Qt元对象机制的高速公路，更便捷；Qt元对象机制提供了哪些组件化有
用的特性功能，来改变开发思路，简化开发工作；Qt开发理念是让Qt对象和组件更加相互独立，摒弃传统的拿工具包来找需要的东西的想法，而要用房屋内相互独立终端共享wifi的想法，终端
专注于各自提供各自的功能，由Qt框架来为终端提供后勤服务。

*/
=========================================================================



The Meta-Object System详情描述
    Qt的元对象系统提供了用于对象间通信的信号与槽机制、运行时类型信息和动态属性系统。
    元对象系统基于这3点：
        ①QObject类作为可以利用元对象系统功能的一个基类。
        ②类声明私有部分中的Q_OBJECT宏用于使能元对象特性，如动态属性、信号和槽功能。
        ③元对象编译器moc(Meta-Object Compiler)为每个QObject子类提供实现元对象特性所需的代码。
    moc工具在编译时读取一个c++源文件。如果它发现源代码中有包含Q_OBJECT宏的类声明，它会为该类生成另一个包含类的元对象代码的c++源文件。这个生成的源文件要么被#include到该类的源文件中，要么更常见的是与该类一同进行编译链接。
    除了为对象之间的通信提供信号和槽机制(引入该系统的主要原因)，元对象代码还提供了以下额外特性：
        ①QObject::metaObject()返回与类对应的元对象。
        ②QMetaObject::className()可以在运行时以字符串的形式返回类名，而不需要c++编译器提供本地运行时类型信息(RTTI)支持。
        ③QObject::inherits()函数返回一个对象是否为QObject继承树中继承指定类的类实例。
        ④QObject::tr()和QObject::trUtf8()为国际化翻译字符串。
        ⑤QObject::setProperty()和QObject::property()根据属性名称动态地设置和获取属性。
        ⑥QMetaObject::newInstance()构造类的一个新实例。
    也可以使用qobject_cast()对QObject类执行动态类型转换。qobject_cast()函数的行为类似于标准c++ dynamic_cast()，其优点是它不需要RTTI支持，并且可以跨动态库工作。它试图将其参数转换为尖括号中指定的指针类型，如果对象的类型正确(在运行时确定)，如果对象的类型不兼容，则返回0。
    例如，假设MyWidget继承自QWidget，并用Q_OBJECT宏声明：
 QObject *obj = new MyWidget;
    类型为QObject *的obj变量实际上指向了一个MyWidget对象实例，因此我们可以对它进行强制类型转换为对应的类型：
 QWidget *widget = qobject_cast<QWidget *>(obj);
    从QObject到QWidget的类型转换是可以的，因为对象实例就是一个MyWidget，它是QWidget的一个子类。既然我们知道obj是一个MyWidget，我们也可以将它转换为MyWidget *:
 MyWidget *myWidget = qobject_cast<MyWidget *>(obj);
    转换到MyWidget同样是可以的，因为qobject_cast()对待Qt内置类型的类型转换或者是自定义类型的类型转换是没有区别的。
 QLabel *label = qobject_cast<QLabel *>(obj); // label is 0
    但是，转换到QLabel类型会失败。指针将设置为0。这使得我们在运行时可以根据类型以不同方式处理不同类型的对象，这对于组件相互作用时的开发非常方便，例如：
     if (QLabel *label = qobject_cast<QLabel *>(obj)) {
          label->setText(tr("Ping"));
      } else if (QPushButton *button = qobject_cast<QPushButton *>(obj)) {
          button->setText(tr("Pong!"));
      }
    虽然可以在不使用Q_OBJECT宏和元对象代码的情况下使用QObject作为基类，但如果不使用Q_OBJECT宏，那么信号、插槽以及这里描述的其他元对象特性都是不可用的。在元对象系统中，对于一个没有元对象代码的QObject子类等价于离它最近有元对象代码的祖先。这意味着，比如使用QMetaObject::className()将不会返回该子类的实际名称，而是返回此有元对象祖先的类名称。
    因此，我们强烈建议QObject的所有子类使用Q_OBJECT宏，无论它们是否实际使用信号、插槽和属性。



The Property System 详情描述
    Qt提供了一个复杂的属性系统，类似于一些编译器供应商提供的。然而，作为一个独立于编译器和平台的库，Qt并不依赖于非标准的编译器特性，如__property或[property]。所以Qt可以支持在Qt兼容的所有平台上与任何标准c++编译器一起工作。它是基于Qt元对象系统实现的，该系统还通过信号和槽提供对象间通信。
【Requirements for Declaring Properties声明Qt属性的规范要求】
    要声明declarations一个属性，在继承了QObject的类中使用Q_PROPERTY()宏。
  Q_PROPERTY(type name (  READ getFunction [WRITE setFunction] | MEMBER memberName [(READ getFunction | WRITE setFunction)]  )
             [RESET resetFunction]
             [NOTIFY notifySignal]
             [REVISION int]
             [DESIGNABLE bool]
             [SCRIPTABLE bool]
             [STORED bool]
             [USER bool]
             [CONSTANT]
             [FINAL])
    下面是来自类QWidget的一些典型的属性声明示例。
  Q_PROPERTY(bool focus READ hasFocus)
  Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
  Q_PROPERTY(QCursor cursor READ cursor WRITE setCursor RESET unsetCursor)
    还可以使用MEMBER关键字将私有成员变量设置为Qt属性。注意，必须设置NOTIFY信号允许QML属性绑定。
      Q_PROPERTY(QColor color MEMBER m_color NOTIFY colorChanged)
      Q_PROPERTY(qreal spacing MEMBER m_spacing NOTIFY spacingChanged)
      Q_PROPERTY(QString text MEMBER m_text NOTIFY textChanged)
      ...
  signals:
      void colorChanged();
      void spacingChanged();
      void textChanged(const QString &newText);
  private:
      QColor  m_color;
      qreal   m_spacing;
      QString m_text;
    Qt属性类似于类的普通成员变量，但同时它还具有Qt元对象系统提供的附加功能。
        ①如果没有指定MEMBER变量，则需要READ函数getter。它用于读取属性值。通常会用一个const函数来实现，它必须返回一个该属性类型或该类型的常引用const &。例如，QWidget::focus是一个只读属性，因为只带有READ函数QWidget::hasFocus()。
        ②WRITE函数setter是可选的。它用于设置属性值。它必须返回void，并且必须只能接受一个具有同样类型、同样类型指针或者同样类型引用的参数。例如，QWidget::enabled有WRITE函数QWidget::setEnabled()。只读属性则不需要WRITE函数。例如，QWidget::focus就没有WRITE功能。
        ③MEMBER将属性与成员变量关联，这样可以使得关联成员变量member variable的属性可读可写，无需再设置READ和WRITE。使用MEMBER关联后，仍然可以设置READ或WRITE访问器函数用于操作(但两者只能选其一)。
        ④RESET函数是可选的。它用于将属性设置为上下文指定的默认值。例如，QWidget::cursor有典型的READ和WRITE函数，QWidget::cursor()和QWidget::setCursor()，它还有一个RESET函数，QWidget::unsetCursor()，因为调用QWidget::setCursor()不能将cursor重置为默认值。RESET函数必须返回void并且不接受任何参数。
        ⑤NOTIFY信号是可选的。它可以设置一个类中的信号signal，当属性的值变化时发出该信号。成员变量的NOTIFY设定的信号函数如果带有1个参数，则该参数默认为新的属性值。当成员属性Member没有设置WIRITE时，属性值一旦变化Qt会自动发出该信号。
？        ⑥REVISION参数是可选的。如果包含，它将定义属性及其通知信号，用于API的特定修订(通常用于向QML公开)。如果未包含，则默认为0。
        ⑦DESIGNABLE属性表示是否需要在GUI设计工具的属性编辑器中可见(例如，Qt Designer)，默认为true。这里需要设置一个布尔成员函数，而不是布尔参数。
？        ⑧SCRIPTABLE属性指示脚本引擎是否应该访问该属性(默认为true)。你可以指定一个布尔成员函数，而不是true或false。
？        ⑨STORED属性指示应该将该属性视为独立存在还是依赖于其他值。它还指示在存储对象状态时是否必须保存属性值。大多数属性是STORED(默认为true)，但例如，QWidget::minimumWidth()的STORED为false，因为它的值只是从属性QWidget::minimumSize()的width组件中获取的，该属性是一个QSize。
？        ⑩USER属性指示属性是指定为类的面向用户属性还是用户可编辑属性。通常，每个类只有一个USER属性(默认为false)。例如，QAbstractButton::checked是(可选中的)按钮的用户可编辑属性。注意，QItemDelegate获取并设置小部件的USER属性。
        ①①CONSTANT属性表示该属性值是常量。对于给定的对象实例，常量属性的READ方法每次被调用时都必须返回相同的值。该常量值对于类型的不同实例可能不同。常量属性不能有WRITE方法或NOTIFY信号。
        ①②FINAL属性的存在表明该属性不可被派生类重写。在某些情况下，这可以用于性能优化，但moc不强制执行。所以千万不要重写FINAL属性。
    可以继承READ、WRITE、RESET函数。它们也可以是虚拟的。当它们在使用多重继承的类中继承时，它们默认为是来自第一个继承中的。
    属性类型可以是QVariant支持的任何类型，也可以是用户定义的类型。在本例中，类QDate被认为是一个用户定义的类型。
    Q_PROPERTY(QDate date READ getDate WRITE setDate)
    因为QDate是用户定义的，所以必须在属性声明中包含<QDate>头文件。
    由于历史原因，QMap和QList作为属性类型是QVariantMap和QVariantList的同义词。
【Reading and Writing Properties with the Meta-Object System读取和写入元对象系统中的属性】
    可以使用QObject::property()和QObject::setProperty()这两个泛函数generic functions读取getting和写入setting属性，除了属性名以外不需要知道关于类的任何信息。在下面的代码片段中，对QAbstractButton::setDown()的调用和对QObject::setProperty()的调用都能设置“down”属性值。
  QPushButton *button = new QPushButton;
  QObject *object = button;          
  button->setDown(true);                             //使用元对象的属性的WRITE函数操作属性    
  object->setProperty("down", true);           //使用元对象属性名及setProperty函数操作属性
    这两种方式中，通过属性的WRITE函数（前者）来设置属性值是更好的，因为它更快，并且在编译时提供更好的诊断，但是以这种方式要求您在编译时了解类。通过名称访问属性可以不用知道类的其他信息。您可以在运行时通过查询类的QObject、QMetaObject和QMetaProperties来发现类的属性。
  QObject *object = ...
  const QMetaObject *metaobject = object->metaObject();
  int count = metaobject->propertyCount();
  for (int i=0; i<count; ++i) {
      QMetaProperty metaproperty = metaobject->property(i);
      const char *name = metaproperty.name();
      QVariant value = object->property(name);
      ...
  }
    在上面的代码片段中，QMetaObject::property()用于获取某类中定义的每个属性的元数据metadata。属性名从元数据metadata中获取，并传递给QObject::property()以获取当前对象中属性的值。
【A Simple Example一个简单的例子】
    假设我们有一个类MyClass，它派生自QObject，并且在它的私有部分中使用Q_OBJECT宏。我们想要在MyClass中声明一个属性来跟踪当前优先级。属性的名称将是priority，其类型将是一个在MyClass中定义的名为Priority的枚举类型enumeration type。
    我们在类的私有部分用Q_PROPERTY()宏声明该属性。所需的READ函数名为priority，我们还包括一个名为setPriority的WRITE函数。枚举类型必须使用Q_ENUM()宏注册到元对象系统中。注册枚举类型之后可以在调用QObject::setProperty()时使用枚举值字符串即可。我们还必须为READ和WRITE函数提供自己的声明。这样MyClass的声明如下:
  class MyClass : public QObject
  {
      Q_OBJECT                                    //声明该对象是Q对象（元对象系统）
      Q_PROPERTY(Priority priority READ priority WRITE setPriority NOTIFY priorityChanged)    //声明该属性是Q属性

  public:
      MyClass(QObject *parent = 0);
      ~MyClass();

      enum Priority { High, Low, VeryHigh, VeryLow };        
      Q_ENUM(Priority)                      //声明该枚举是Q枚举

      void setPriority(Priority priority)
      {
          m_priority = priority;
          emit priorityChanged(priority);
      }
      Priority priority() const    //const函数要求不能在函数内部改变成员变量的值
      { return m_priority; }

  signals:
      void priorityChanged(Priority);

  private:
      Priority m_priority;
  };

    READ函数是const函数，并返回属性对应的类型。WRITE函数返回void，并且只有一个属性类型的参数。这些都是元对象编译器强制要求规则。
    给定一个指向MyClass实例类型的指针或一个指向MyClass实例的QObject类型指针都可以，然后我们有两种方法来设置它的优先级属性：
  MyClass *myinstance = new MyClass;
  QObject *object = myinstance;
  myinstance->setPriority(MyClass::VeryHigh);  //注意这里是 set属性名( )函数而不是setProperty( )函数
  object->setProperty("priority", "VeryHigh");   //由于MyClass::VeryHigh是Q枚举，所以可以直接使用字符串类型的值
    在这个例子中，枚举类型(属性类型)是在MyClass中声明的，并使用Q_ENUM()宏注册到元对象系统中。这使得枚举值可以作为字符串使用，就像在setProperty()的调用中一样。
    如果枚举类型在另一个类中声明，则需要它的完全限定名(即OtherClass::Priority)，而其他类也必须继承QObject并使用Q_ENUM()宏在那里注册枚举类型，这样使得类内部的枚举类可以在全局使用。
    还有一个类似Q_ENUM()的宏，宏Q_FLAG()也可以用于向元对象系统注册一个枚举类型，不同的是它将类型标记为一组标志位，即能做或运算OR的值。比如I/O类可能有枚举类型的配置参数Read和Write，由于QObject::setProperty()可以接受或运算Read | Write（可读可写）的，则这个枚举类型需要使用Q_FLAG()来注册。
【Dynamic Properties动态属性】
    QObject::setProperty()还可以用来在运行时为类的实例添加新的属性。当传入一个属性名和一个值作为参数调用时，如果QObject中已存在同样名称的属性，并且传入的值与原属性的类型一致，则将为原属性进行赋值操作并返回true。如果该值与原属性的类型不一致，则无法赋值并返回false。
    但是，如果传入的属性名在QObject中并不存在(即，如果没有使用Q_PROPERTY()声明)，传入的属性名和值参数会自动添加到QObject中作为一个新属性，但此时仍然返回false。这意味着QObject::setProperty()返回false不能用于确定属性是否被成功赋值，除非您事先知道该属性名是否已经存在于QObject中。
    注意，动态属性是在每个实例的基础上添加的，也就是说，它们被添加到QObject对象上，而不是QMetaObject。通过将属性名和无效的QVariant值传递给QObject::setProperty()，就可以从实例中删除属性。QVariant的默认构造函数就是一个无效的QVariant值。
    动态属性可以用QObject::property()查询，就像用Q_PROPERTY()在编译时声明的属性一样，只不过可以在运行时中进行添加删除。
【Properties and Custom Types属性和自定义类型】
    属性使用的自定义类型需要使用Q_DECLARE_METATYPE()宏注册为元对象系统中的Q类型，这样它们的值可以存储在QVariant对象中。这使得自定义类型既适用于Q_PROPERTY()宏声明创建的静态属性的类型，也适用于在运行时创建的动态属性的类型。 
【Adding Additional Information to a Class向类添加附加信息】
    Q_CLASSINFO()是一个与属性系统有关的附加宏，可以用该宏来为类的元对象添加一个附加的键值对信息，例如：
    Q_CLASSINFO("Version", "3.0.0")
    像其他元数据一样，类信息可以在运行时通过元对象的QMetaObject::classInfo(int index)进行获取，返回值是QMetaClassInfo类型，通过name()和value()连个成员函数获得类的附加信息键值对。


Object Model  详情描述
    标准的c++对象模型为对象范式提供了非常有效的运行时支持。但是在某些问题领域中它的静态特性显得不够灵活。图形用户界面编程是一个既需要运行效率又需要高度灵活性的领域。Qt结合c++的速度和Qt对象模型的灵活性。
    Qt在C++的基础上还提供了如下特性：
        ①一个强大的无缝的对象间的通信机制——信号与槽signals and slots。
        ②运行时可查可改的对象属性object properties。
        ③强大的事件和事件过滤器events and event filters。
        ④用于国际化的上下文字符串翻译string translation for internationalization。
        ⑤复杂的计时器timers中间件，这样可以在事件驱动的GUI中可以优雅地集成多个任务。
        ⑥层次结构和可查询的对象树object trees，以自然的方式组织对象的从属关系。
        ⑦安全指针QPointer，当被引用的对象被销毁时自动设置为0，不像普通的c++指针，当它们的对象被销毁时变成悬空指针。
        ⑧一种全局的动态类型转换dynamic cast。
        ⑨支持自定义custom type Qt类型。
    这些通过继承QObject得到的Qt特性，许多都是通过标准c++技术实现的。其他的，像对象通信机制和动态属性系统，则需要Qt自己的元对象编译器(moc)提供的元对象系统。
    Qt元对象系统是一个C++扩展，它使该语言更适合真正的组件GUI编程。
【Important Classes核心类】
    QMetaClassInfo：有关Qt类的其他信息
    QMetaEnum：关于枚举器的Qt元数据
    QMetaMethod：关于成员函数的Qt元数据
    QMetaProperty：关于属性的Qt元数据
    QMetaType：管理Qt元对象系统中的类型
    QObject：所有Qt对象的基类
    QSignalBlocker：安全的信号屏蔽/使能
    QObjectCleanupHandler：可以全局监视并操作销毁Q对象
    QMetaObject：包含关于Qt对象的元信息
    QPointer：QObject的安全指针，被引用的对象被销毁时自动设置为0，而不是成为悬空指针。
    QSignalMapper：就是个信号转发到槽的中间件，是个中介，在简化大量重复信号槽操作或者划分项目开发层次时使用。
    QVariant：Qt数据类型的联合体，可以保存任何类型的Q变量/对象
【Qt Objects: Identity vs Value Qt对象:标识vs值】
    上面列出的Qt对象模型的一些新增特性，要求我们将Qt对象视为身份象征Identity，而不是值Value。值可以被复制copy或赋值assign操作；身份的象征则不能，身份标识只能被赋予(Clone)。赋予一个身份是指为普通的对象赋予一个新的Qt身份，而不是复制别的Q对象的身份。例如，双胞胎有不同的身份。它们可能看起来一样，但它们有不同的名字，不同的位置，可能有完全不同的社交网络。
    那么，赋予身份(Identity Clone)是一个比复制(copy)或赋值(assign)更复杂的操作。我们可以在Qt对象模型中看到这意味着什么。
    如果Qt对象能被简单的复制……
        ①可能有一个唯一的QObject::objectName()。如果直接复制Qt对象的话，应该给它取什么名字?
        ②在对象层次结构中有一个位置。如果我们复制一个Qt对象，复制的对象应该位于那个位置?
        ③可以连接到其他Qt对象向它们发出信号或接收它们发出的信号。如果我们复制一个Qt对象，这些信号槽是否还需要被关联?
        ④可以在运行时添加未在c++类中声明的新属性。如果我们复制一个Qt对象，也需要给复制体同步添加动态属性吗?
    由于这些原因，Qt对象应该被视为身份象征、身份表示，而不是简单的值。身份可以克隆另一个出来，而不是被简单复制或赋值，身份的克隆是比复制或赋值更复杂的操作。因此，QObject和QObject的所有子类(直接或间接)都禁用了它们的复制构造函数和赋值操作符。


Object Trees & Ownership 详情描述
【Overview 概述】
    QObjects将自己组织在对象树中。当您创建一个以另一个对象作为父对象的QObject时，它将被添加到父对象的children()列表中，并在父对象被删除时也被删除。事实证明，这种方法非常适合GUI开发的思想。例如，QShortcut(键盘快捷方式)是相关窗口的子窗口，因此当用户关闭该窗口时，该快捷方式也会被删除。
    QQuickItem，Quick模块的基本视觉元素，继承自QObject，但是还继承一个UI父类。Item的继承的UI父类不一定与其他父类相同。更多细节请参见Qt Quick中的概念-可视化父类Visual Parent in Qt Quick。
    QWidget是Qt Widgets模块的基本类，它扩展了父子关系。一个子部件通常也会变成一个子部件，例如，它会显示在父部件的坐标系统中，并被父部件的图像边界包裹。例如，当应用程序关闭消息框后，该消息框被销毁时，该消息框的按钮和标签也会被销毁，正如我们所希望的那样，因为按钮和标签是消息框的子元素。
    您也可以自己删除子对象，它们将从父对象中删除。例如，当用户删除一个工具栏时，应用程序会删除它的QToolBar对象之一，在这种情况下，工具栏的QMainWindow父窗口将检测到变化，并相应地重新配置它的屏幕空间。
    另外，当应用程序运行时看起来很奇怪时，调试函数QObject::dumpObjectTree()和QObject::dumpObjectInfo()通常很有帮助。
【Construction/Destruction Order of QObjects QObject构造/析构顺序】
    当QObjects在堆空间创建时(即，用new创建)，不管创建顺序如何都会形成一个树形结构，而且，树中的对象也可以以任何顺序销毁。当删除树中的任何QObject时，如果对象有父对象，析构函数会自动从其父对象中删除该对象。如果对象有子对象，析构函数会自动删除每个子对象。无论销毁顺序如何，所有QObject都不会被删除两次。
    当在栈空间上创建QObjects时，销毁的顺序有可能表现的是一样。如下代码片段：
  int main()
  {
      QWidget window;
      QPushButton quit("Quit", &window);
      ...
  }
    父元素window窗口和子元素quit按钮都是QObject，因为QPushButton->QWidget->QObject。这段代码是正确的：quit按钮的析构函数不会被调用两次，因为c++语言标准(ISO/IEC 14882:2003)规定调用析构函数的调用顺序与局部对象创建时的构造函数顺序相反。因此，子元素quit按钮的析构函数首先被调用，并且在调用window的析构函数之前子元素已经将自己从父元素window中移除。
    但是，栈空间对于局部变量还有一套自己销毁顺序LIFO，所以，如果如下代码交换创建时候的构造的顺序会发生什么：
  int main()
  {
      QPushButton quit("Quit");
      QWidget window;
      quit.setParent(&window);
      ...
  }
    在这种情况的析构顺序便会出现问题。根据LIFO顺序，父元素window的析构函数首先被调用，因为它是最后创建的。由于Qt的树形结构关系，同时会调用子元素quit的析构函数。这是不正确的，因为quit还是一个栈空间的局部变量，当quit局部变量超出作用域时，局部变量的析构函数会再次被调用，虽然在C++规制中这一次是正确的，但是在此之前quit元素已经被销毁了，存在同一对象两次析构的错误。




QObject Class详情描述:
    QObject类是所有Qt对象的基类。
    QObject是Qt对象模型的核心。这个模型的中心特征是一个非常强大的无缝对象通信机制，称为信号(signals)和槽(slots)。你可以用connect()将信号连接到插槽，用disconnect()破坏连接。为了避免没完没了的通知循环，你可以用blockSignals()临时阻塞信号。protected函数connectNotify()和disconnectNotify()使连接行为的提示成为可能。
    QObjects将自己组织在对象树中。当派生类的基类为QObject及其子类时，该对象将自动添加到父对象的children()列表中。父对象拥有该对象的所有权;也就是说，它会自动在它的析构函数中删除它的子函数。可以按对象名称查找对象，也可以使用findChild()或findChildren()选择查找。
    每个QObject子类对象都有一个objectName()，它的类名可以通过相应的metaObject()找到(参见QMetaObject::className())。通过使用inherits()函数，可以确定对象的类是否继承了QObject继承层次中的另一个类。
    当一个对象被删除时，它会发出一个destroyed()信号signal。你可以捕捉这个信号来避免之后对QObjects的空引用。
    QObjects可以通过event()接收事件event，并过滤其他对象的事件。详情请参阅installEventFilter()和eventFilter()。还可以重新实现childEvent()函数来捕获子事件。
    最后但同样重要的是，QObject在Qt中提供了基本的计时器支持;有关对计时器的高级支持，请参阅QTimer对象。
    注意，Q_OBJECT宏对于任何实现信号、槽或属性的QObject子类对象都是必需的。因为需要在源文件上运行元对象编译器。所以强烈建议在QObject的所有子类中使用这个宏，无论它们是否实际使用信号、插槽和属性，因为如果不这样做，可能会导致某些函数出现奇怪的行为。
    UI中的所有Qt widgets件都继承了QObject。方便的函数isWidgetType()返回一个对象是否是一个小部件。它比qobject_cast<QWidget *>(obj)或obj->inherits(“QWidget”)快得多。
    一些QObject函数，例如children()，返回一个QObjectList。QObjectList是QList<QObject *>的类型定义。
【Thread Affinity线程关联性】
    QObject实例对象具有线程关联性、亲和性，或者说它始终运行在某个确定的线程中。当QObject接收到一个队列信号queued signal或一个已发布事件posted event时，插槽slot或事件处理程序event handler将仍在该对象所在的线程中运行，避免频繁切换线程影响运行速率。
    注意:如果一个QObject没有与线程关联绑定的话(也就是说，如果thread()函数returns 0)，或者它处在一个没有事件循环运行的线程中，那么它就不能接收排队的信号或发布的事件。
    默认情况下，QObject驻留在创建它的线程中。可以使用thread()查询对象的线程的关联，并使用moveToThread()更改对象的线程关联性，移动至其他线程当中。
    所有的QObject必须和它们的父线程在同一个线程中。因此：
        ①如果两个QObject在不同的线程中，setParent()将失败。
        ②当一个QObject被移动到另一个线程时，它的所有子对象也会自动跟随父对象移动到新线程。
        ③如果QObject有父对象，moveToThread()函数将无法工作。
        ④如果QObjects是在QThread::run()中创建的，它们就不能成为QThread对象的子对象，因为QThread并不存在于调QThread::run()的线程中。
    注意:QObject的成员变量不会自动成为它的子变量。父子关系必须通过将父对象指针传入子对象的构造函数中，或者调用setParent()来设置。如果没有这个步骤，当moveToThread()被调用时，未进行父子关系绑定对象的成员变量将保留在旧线程中。
【No Copy Constructor or Assignment Operator禁用拷贝构造函数或赋值操作符】
    QObject既没有复制构造函数，也没有赋值操作符。这是设计好的。实际上有这个声明，但它们是用宏Q_DISABLE_COPY()在私有部分声明的。事实上，所有从QObject派生的Qt类(直接或间接)都使用这个宏来声明它们的复制构造函数和赋值操作符为私有禁用的。推理可以在Qt对象模型Qt Object Model页面上关于标识与价值的讨论中找到。
    主要的后果是，你应该在想让QObject子类对象作为一个值进行赋值的地方,使用指向QObject(或指向你的QObject子类)的指针。再举个例子，因为Qt类QObject没有复制构造函数，就不能把QObject的子类对象作为值赋给另一个对象保存，你必须用指针保存。
【Auto-Connection信号槽自动连接】
    Qt的元对象系统提供了一种机制来自动连接QObject子类及其子类之间的信号signals和插槽slots。只要用合适的对象名称定义对象，并且插槽遵循简单的命名约定，这个连接就可以在运行时由QMetaObject::connectSlotsByName()函数执行。
    UIC(User Interface Compiler)生成调用此信号槽连接函数以支持使用Qt Designer创建的窗体小部件之间的自动连接。有关使用Qt设计器自动连接的更多信息，请参见Qt设计器手册的“Using a Designer UI File in Your Application”一节。 
【Dynamic Properties动态属性】
    从Qt 4.2开始，动态属性可以在运行时环境中添加到QObject实例中或从QObject实例中删除。动态属性不需要在编译时声明，但它们提供了与静态属性相同的优点，并且使用相同的API进行操作——使用property()来读取它们，使用setProperty()来编写它们。
    从Qt 4.3开始，Qt设计器支持动态属性，标准Qt小部件和用户自定义部件都可以被赋予动态属性。
【Internationalization (I18n)语言国际化】
    所有QObject子类都支持Qt的翻译特性，可以将应用程序的用户界面翻译成不同的语言。
    要使用户可见的文本可翻译，必须在调用tr()函数对其进行包装。这在为翻译编写源代码文档中有详细的解释。
    更多参见QMetaObject, QPointer, QObjectCleanupHandler, Q_DISABLE_COPY()和对象树和所有权。



Signals & Slots详情描述:
    信号和槽用于对象之间的通信。信号和槽机制是Qt的核心特性，可能也是与其他框架所提供特性最大的不同之处。Qt的元对象系统实现了信号和槽。
【Introduction介绍】
    在GUI编程中，当我们更改一个小部件时，我们通常希望通知另一个小部件。更一般地说，我们希望任何类型的对象都能够相互通信。例如，如果用户单击Close按钮，我们可能希望调用窗口的Close()函数。
    其他工具包使用回调实现这种通信。回调函数是一个指向函数的指针，因此，如果您希望框架函数通知您一些事件，则需要将指向另一个函数(回调函数)的指针传递给框架函数。然后，框架函数在适当的时候调用回调函数。虽然确实存在使用这种方法的成功框架，但回调可能不直观，并且可能在确保回调参数类型正确性方面存在问题。
【Signals and Slots信号与槽】
    在Qt中，有一种替代回调技术的方法:信号和槽。当特定事件发生时，就会发出信号signals。Qt的小部件有很多预定义的信号，但是我们总是可以将小部件子类化以添加我们自己的信号到它们中。槽slots是响应特定信号而调用的函数。Qt的小部件有许多预定义的槽，但通常的做法是继承小部件并添加自己的槽，这样您就可以处理感兴趣的信号。
    信号和槽机制是类型安全的:信号的声明必须与接收槽的声明匹配。(事实上，槽的声明可能比它接收到的信号短，因为它可以忽略额外的参数。)由于声明是兼容的，所以在使用基于函数指针的SIGNAL和SLOT语法时，在编译时可以帮助我们检测类型不匹配。基于字符串的SIGNAL和SLOT语法，将在运行时检测类型不匹配。
    信号和槽是松散耦合的:一个发出信号的类既不知道也不关心哪个槽接收信号。Qt的信号和槽机制确保了如果你将一个信号连接到一个槽，这个槽将在正确的时间用信号的参数调用。信号和槽可以接受任意数量、任意类型的参数。它们是完全类型安全的。
    所有从QObject或它的一个子类(例如，QWidget)继承的类都可以包含信号和槽。当该对象的某个特定的状态变化需要通知到与其关联connect的其他对象时，该对象在运行时就会发出信号signal。这是对象为通信所做的所有工作。它不知道或不关心是否有任何东西正在接收它发出的信号。这是真正的信息封装，并确保对象可以用作软件组件。
    插槽slot可以用来接收信号，它们本身也是普通的成员函数。就像对象不知道是否有东西接收到它的信号一样，槽也不知道是否有任何信号连接到它。这确保了可以用Qt创建真正独立的组件。
    您可以将任意多的信号连接到一个插槽，一个信号可以连接到任意多的插槽。甚至可以将一个信号直接连接到另一个信号。(这将在第一个信号发出时立即发出第二个信号。)
    信号和插槽一起构成了一个强大的Qt组件编程机制。
【Signals信号】
    自定义的信号就是在类定义里声明的一个函数，但是这个函数无需实现，只在需要告知外界变化的位置发射emit信号即可
    运行时当对象的特定的内部状态变化时，对象就会发出信号给客户对象client或持有对象owner。信号是公共public函数，虽然可以从任何地方发出，但建议只可以从定义信号及其子类的类发出信号。
    当信号发出时，连接到它的槽通常会立即执行，就像正常的函数调用一样。当这种情况发生时，信号和槽机制与GUI事件循环机制相互独立。发射信号的emit语句后面的代码，通常情况下，只有当所与其有关联的槽都返回后才会继续执行。如果关联connect的类型是队列连接queued connections时，情况略有不同，在这种情况下，emit关键字后面的代码将立即继续执行，插槽将稍后执行。
    如果多个槽连接到一个信号，当信号发出时，这些槽将按照连接的顺序依次执行。
    信号是由moc自动生成的，不能在.cpp文件中实现。它们永远不能有返回类型(也就是说，只能使用void)。
    关于参数的一个注意事项:我们的经验表明，如果信号和槽不使用特殊类型，它们更易于重用。如果信号QScrollBar::valueChanged( QScrollBar::Range )使用了一个特殊的类型，例如假设的QScrollBar::Range，它只能连接到专门为QScrollBar设计的槽。这将无法使不同的输入部件连接在一起。
【Slots槽】
    当连接到插槽的信号signals被发射emit时，插槽slot被调用。插槽是正常的c++成员函数，也可以正常调用;它们唯一的特点是可以与信号关联connect。
    因为插槽是普通的成员函数，所以它们在直接调用时遵循普通的c++规则。但是，作为槽，任何组件都可以通过信号槽连接调用它们，而不考虑其访问限制类型。这意味着，从一个对象发出的信号signals可以调用另一个对象的私有槽private slots。
    您还可以将插槽定义为虚拟函数virtual，我们发现这在实践中非常有用。
    与回调相比，信号和插槽稍微慢一些，这是因为它们提供了更高的灵活性，但对于实际应用程序来说，这种差异并不显著。一般来说，发射一个连接到某些插槽的信号，比直接调用非虚函数的接收器大约慢10倍。这是定位连接对象所需的开销，以安全遍历所有连接(即检查后续的接收器在发射期间没有被破坏)，并以通用的方式安排任意参数。
    虽然十几个非虚函数调用听起来很多，但它比任何创建new或删除delete操作的开销要少得多。例如，当您执行string、vector或list操作时，后台需要添加new或删除delete操作，信号和插槽开销只占整个相关函数调用开销的很小一部分。同样，当你在槽中执行一个系统调用，或间接调用十多个函数。信号和插槽机制的开销对于简单性和灵活性来说是值得的，用户基本注意不到这点开销。
    请注意，其他库如果与基于qt的应用程序一起编译时，如果其中含有signals或slots标识符定义的变量，的可能会导致编译器警告和错误。可以通过对这个标识符symbol取消宏定义#undef来解决这个问题。
【A Small Example小例子】
    一个最小的c++类声明declaration通常这样写：
class Counter
  {
  public:
      Counter() { m_value = 0; }

      int value() const { return m_value; }
      void setValue(int value);

  private:
      int m_value;
  };
    但一个基于qobject的小类的结构一般这样声明:

#include <QObject>

class Counter : public QObject      //继承QObject 
  {
      Q_OBJECT                              //Qt元对象机制的宏定义

  public:
      Counter() { m_value = 0; }

      int value() const { return m_value; }

  public slots:                            //槽
      void setValue(int value);

  signals:                                  //信号，必须为void
      void valueChanged(int newValue);    //通知外界自身状态改变的信号

  private:
      int m_value;
  };
    基于QObject的版本的类具有相同的内部数据结构，并提供了访问该内部结构状态的公共方法，但除此之外，它还支持使用信号signals和槽slots的组件编程。这个类可以通过发出一个valueChanged()信号signals来告诉外界它的状态已经改变，并且它有一个槽slot，其他对象可以向它发送信号signals。
    所有包含信号signals或槽slots的类class必须在其声明的顶部提到Q_OBJECT宏。它们还必须(直接或间接)从QObject派生。
    插槽由应用程序程序员实现。下面是Counter::setValue()槽的实现的例子:
void Counter::setValue(int value)
  {
      if (value != m_value) {
          m_value = value;
          emit valueChanged(value);    //emit 一个信号函数，可以向外界发送带参信号
      }
  }
    这个函数，不仅将新值赋值给变量，还通过emit向外界发出valueChanged(value)带参数的信号。
    在下面的代码片段中，我们创建了两个Counter对象，并使用QObject::connect()将第一个对象的valueChanged()信号连接connect到第二个对象的setValue()槽:
Counter a, b;
QObject::connect(&a, &Counter::valueChanged, &b, &Counter::setValue);  //将a的值改变信号，与b的设置参数值的槽关联
a.setValue(12);     // a.value() == 12, b.value() == 12     
b.setValue(48);     // a.value() == 12, b.value() == 48   
    调用a.setValue(12)会发出一个valueChanged(12)的信号，b将在它的setValue(int)槽中接收到这个信号，也就是说b.setValue(12)在信号发射后被调用。然后b发出同样的valueChanged()信号，但由于这里没有槽连接到b的valueChanged()信号，该信号被忽略。
    注意，setValue()函数中有一句判断，只在value != m_value时才会设置值并发出信号。这样处理可以防止在循环连接的情况下出现无限循环(例如，当b.valueChanged()被连接到a.setValue()的情况下)。
    默认情况下，对于建立的每一个连接，都会发出一个信号;如果存在重复的相同连接，将会发出两个信号。您可以只通过一个单独的disconnect()调用来断开所有这些重复的连接。如果你传递了Qt::UniqueConnection类型设置，连接只会在它不是会导致重复的情况下建立。如果已经有一个重复完全一样的连接(在相同的对象上有完全相同的信号到完全相同的槽位)，连接将失败并返回false。
    上面这个示例说明了对象可以一起工作，而不需要知道彼此的任何信息。要实现这一点，对象只需要连接在一起，这可以通过一些简单的QObject::connect()函数调用或uic的自动连接automatic connections功能来实现。
【A Real Example一个实际案例】
    下面是一个简单的小部件注释示例。
  #ifndef LCDNUMBER_H
  #define LCDNUMBER_H
  #include <QFrame>
  class LcdNumber : public QFrame        //LcdNumber通过QFrame和QWidget继承了QObject, QObject拥有大部分的信号槽信息。它有点类似于内置的QLCDNumber小部件。
  {
      Q_OBJECT                                        //Q_OBJECT宏由预处理器解释为，多个通过moc(Meta-Object Compiler元对象编译器)执行得到的成员函数;如果你得到这样一条编译错误“undefined reference to vtable for LcdNumber”，你可能已经忘记run the moc或者在link命令command中没有包含moc输出。
 public:
      LcdNumber(QWidget *parent = 0);  //构造函数与moc不相关，这里既然继承了QWidget，则需要在构造函数中设置父参数，并将其传递给基类的构造函数。
      //这里省略了一些析构函数和成员函数;moc忽略成员函数。
 signals:
      void overflow();                               //当被要求显示一个不可能的值时，LcdNumber发出这个信号。如果无需关心溢出或者溢出导致任何问题，你可以选择忽略overflow()信号，无需将它连接到任何槽。
                                                            //另一方面，如果您想在数字溢出时调用两个不同的异常处理函数，只需将信号连接到两个不同的槽。Qt将按它们连接的顺序依次调用两者。
 public slots:
      void display(int num);                     //插槽是一个接收函数，用于接收其他小部件状态变化的信息。正如代码所示，LcdNumber使用它来设置显示的数字。因为display()是类与程序的其他部分的交互接口之一，所以插槽是公共的public。
      void display(double num);              //有的示例程序将QScrollBar的valueChanged()信号连接到display()插槽，因此LCD显示将随着滚动条的值动态变化。
      void display(const QString &str);    //注意display()是重载overloaded的;当你将信号连接到插槽时，Qt将选择对应的声明版本version。如果使用回调机制，那就必须找到多个不同的重载声明，并选择自己合适类型进行调用。
      void setHexMode();
      void setDecMode();
      void setOctMode();
      void setBinMode();
      void setSmallDecimalPoint(bool point);
  };
  #endif    /*LCDNUMBER_H*/
【Signals And Slots With Default Arguments带有默认参数的信号和槽】
    信号和槽的签名(signatures，即有关参与重载决策的函数的信息)的可以包含参数，参数可以有默认值。考虑QObject:摧毁():可以包含参数，参数可以有默认值。比如：
void destroyed(QObject* = 0);                      //带有默认参数的信号
    当一个QObject被删除时，它发出QObject::destroyed()信号。在任何可能存在一个悬空引用已删除的QObjec对象的地方，我们需要接收这个信号，这样我们可以清理它。一个合适的对应的插槽签名可以是：
void objectDestroyed(QObject* obj = 0);      //带有默认参数的槽
    为了将信号连接到插槽，我们使用QObject::connect()。有几种连接信号和插槽的方法。第一个是使用函数指针：
connect(sender, &QObject::destroyed, this, &MyObject::objectDestroyed);     //使用函数指针形式的连接方式
    使用QObject::connect()函数指针有几个优点。首先，它允许编译器检查信号的参数是否与槽的参数兼容，便于函数重载。如果需要，参数也可以由编译器隐式转换implicitly convert。
    你也可以使用匿名函数或c++ 11的lambdas表达式进行连接，[=]表示以值捕获的方式隐式捕获外部变量，[&]表示以引用捕获的方式隐式捕获外部变量：
connect(sender, &QObject::destroyed, [=](){ this->m_objects.remove(sender); });   //C++11新的函数形式
    另一种连接信号到槽的方法是使用QObject::connect()以及SIGNAL和SLOT宏macros。关于是否在SIGNAL()和SLOT()宏中包含参数的规则是，如果参数有默认值，则指派给SIGNAL()宏的签名的包含参数的数量不能少于指派给SLOT()宏的签名。
    下面这些都是可行的：
  connect(sender, SIGNAL(destroyed(QObject*)), this, SLOT(objectDestroyed(Qbject*)));     //信号和槽签名参数数量相同
  connect(sender, SIGNAL(destroyed(QObject*)), this, SLOT(objectDestroyed()));                //信号签名参数数量>槽
  connect(sender, SIGNAL(destroyed()), this, SLOT(objectDestroyed()));                              //信号签名参数都为空
    但这个行不通：
  connect(sender, SIGNAL(destroyed()), this, SLOT(objectDestroyed(QObject*)));    //信号签名参数数量<槽
    因为插槽将期待信号不会发送的QObject。此连接语句将报告一个运行时错误。
    注意，当使用QObject::connect()重载时，编译器不会检查信号和槽参数。
【Advanced Signals and Slots Usage信号和槽高级用法】
    对于需要信号发送方信息的情况，Qt提供了QObject::sender()函数，该函数返回一个指向发送信号的对象的指针。
    QSignalMapper类是为许多信号连接到同一个槽的情况提供的，而槽需要以不同的方式处理每个信号。
    假设你有三个按钮来决定你要打开哪个文件:“税务文件”、“帐户文件”或“报告文件”。
    为了打开正确的文件，您使用QSignalMapper::setMapping()将所有QPushButton::clicked()信号映射到QSignalMapper对象。然后将文件的QPushButton::clicked()信号连接到QSignalMapper::map()插槽。
      signalMapper = new QSignalMapper(this);
      signalMapper->setMapping(taxFileButton, QString("taxfile.txt"));
      signalMapper->setMapping(accountFileButton, QString("accountsfile.txt"));
      signalMapper->setMapping(reportFileButton, QString("reportfile.txt"));
      connect(taxFileButton, &QPushButton::clicked, signalMapper, &QSignalMapper::map);
      connect(accountFileButton, &QPushButton::clicked, signalMapper, &QSignalMapper::map);
      connect(reportFileButton, &QPushButton::clicked, signalMapper, &QSignalMapper::map);
    然后，将mapped()信号连接到readFile()，在那里将根据按下的是哪个按钮打开一个不同的文件，这种编程方式比通过自定义一个按钮组件然后传递出一个QString参数的方式有更清晰的层次。
      connect(signalMapper, SIGNAL(mapped(QString)), this, SLOT(readFile(QString)));
【Using Qt with 3rd Party Signals and Slots使用Qt与第三方信号和槽】
    Qt可以使用第三方的信号/槽机制。您甚至可以在同一个项目中使用这两种机制。只需将下面这一行添加到qmake项目(.pro)文件中。
CONFIG += no_keywords
    它告诉Qt不要定义moc关键字信号、插槽和emit，因为这些名称将被第三方库使用，例如Boost。在no_keywords标志情况下如果需要继续使用Qt信号和槽，只需将源代码中所有使用的Qt moc相关的关键字替换为相应的Qt宏Q_SIGNALS(或Q_SIGNAL)， Q_SLOTS(或Q_SLOT)和Q_EMIT。







